from math import sin, cos, pi, tan, atan
from tile import Tile

alpha = 2*pi/5
beta = atan((sin(2*alpha))/(2 - cos(2*alpha)))
dx = cos(alpha)
dy = sin(alpha)

T1 = Tile('T1', [(0, 0), (1, 0), (1 + dx, -dy),
          (1 + dx + cos(2*alpha), -dy - sin(2*alpha)), (-dx, -dy)])
T1 = T1.tra_vec(-0.5, -tan((pi+2*pi/5)/2)*0.5)
T1.scale = 1/(sin(2*alpha)/sin(beta))
T1y1 = -0.5/cos((pi-2*pi/5)/2)
T1y2 = tan((pi+2*pi/5)/2)*0.5

T2 = Tile('T2', [(0, 0), (2, 0), (2 - cos(2*alpha), -sin(2*alpha))])
T2.scale = T1.scale

T345v = [(0, 0), (-cos(2*alpha), -sin(2*alpha)), (-2*cos(2*alpha), 0)]
T3 = Tile('T3', T345v)
T4 = Tile('T4', T345v)
T5 = Tile('T5', T345v)
T3.scale = -2*cos(2*alpha)/(-2*cos(2*alpha)*7 + 2)
T4.scale = T3.scale
T5.scale = T3.scale

T67v = [(0, 0), (cos(alpha), -sin(alpha)), (2*cos(alpha), 0)]
T6 = Tile('T6', T67v)
T7 = Tile('T7', T67v)
T6.scale = 1/(5 -4*cos(2*alpha))
T7.scale = T6.scale

T1s1 = []
T1s1.append(T2.cpy().tra(T1[0]).scl(T1.scale).rot(beta+alpha+pi).push())
T1s1.append(T4.cpy().tra(T1[0]).scl(T1.scale).flipX().rot(-beta+alpha).push())
T1s1.append(T5.cpy().tra(T1s1[-1][0]).scl(T1.scale).rot(beta-alpha).push())
T1s1.append(T5.cpy().tra(T1s1[-1][1]).scl(T1.scale).rot(beta-alpha).push())
T1s1.append(T5.cpy().tra(T1s1[-1][0]).scl(T1.scale).flipX().rot(-beta+alpha).push())
T1s = []
T1s.extend([t.cpy() for t in T1s1])
T1s.extend([t.cpy().rot(alpha).push() for t in T1s1])
T1s.extend([t.cpy().rot(alpha*2).push() for t in T1s1])
T1s.extend([t.cpy().rot(alpha*3).push() for t in T1s1])
T1s.extend([t.cpy().rot(alpha*4).push() for t in T1s1])
T1s.append(T1.cpy().scl(T1.scale).rot(beta).push())

T2s = []
T2s.append(T2.cpy().tra(T2[0]).scl(T2.scale).flipX().rot(beta).push())
T2s.append(T2.cpy().tra(T2s[-1][2]).scl(T2.scale).flipX().rot(beta).push())
T2s.append(T2.cpy().tra(T2s[-1][2]).scl(T2.scale).flipX().rot(beta-2*alpha+pi).push())
T2s.append(T7.cpy().tra(T2s[-3][2]).scl(T2.scale).flipX().flipY().rot(pi-beta-alpha).push())
T2s.append(T6.cpy().tra(T2s[-1][2]).scl(T2.scale).rot(pi-beta-alpha).push())
T2s.append(T7.cpy().tra(T2s[-1][1]).scl(T2.scale).flipX().flipY().rot(pi-beta-alpha).push())
T2s.append(T6.cpy().tra(T2s[-1][2]).scl(T2.scale).rot(pi-beta-alpha).push())
T2s.append(T5.cpy().tra(T2s[-1][0]).scl(T2.scale).flipY().rot(beta+pi).push())
T2s.append(T5.cpy().tra(T2s[-1][1]).scl(T2.scale).flipY().rot(beta+pi).push())
T2s.append(T5.cpy().tra(T2s[-1][0]).scl(T2.scale).rot(-beta).push())
T2s.append(T5.cpy().tra(T2s[-1][1]).scl(T2.scale).flipY().rot(beta+pi).push())

T3s = []
T3s.append(T3.cpy().tra(T3[0]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T7.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha).push())
T3s.append(T7.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha+pi).push())
T3s.append(T3.cpy().tra(T3s[-1][0]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T3.cpy().tra(T3s[-1][1]).scl(T3.scale).push())
T3s.append(T5.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T3.cpy().tra(T3s[0][1]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T7.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha).push())
T3s.append(T7.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha+pi).push())
T3s.append(T5.cpy().tra(T3s[-1][0]).scl(T3.scale).push())
T3s.append(T3.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T5.cpy().tra(T3s[-1][1]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[8][1]).scl(T3.scale).push())
T3s.append(T3.cpy().tra(T3s[-1][1]).scl(T3.scale).flipX().push())
T3s.append(T6.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha).push())
T3s.append(T6.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha+pi).push())
T3s.append(T3.cpy().tra(T3s[-1][0]).scl(T3.scale).push())
T3s.append(T1.cpy().tra(T3s[-1][2]).tra(0, T1y1*T3.scale).scl(T3.scale).rot(pi).push())
T3s.append(T4.cpy().tra(T3s[15][1]).scl(T3.scale).push())
T3s.append(T7.cpy().tra(T3s[-1][2]).scl(T3.scale).rot(-alpha).push())
T3s.append(T6.cpy().tra(T3s[-1][2]).scl(T3.scale).rot(-alpha+pi).push())
T3s.append(T4.cpy().tra(T3s[-2][1]).scl(T3.scale).flipX().rot(-2*alpha-pi).push())
T3s.append(T4.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha).push())
T3s.append(T5.cpy().tra(T3s[-1][0]).scl(T3.scale).rot(alpha).push())
T3s.append(T6.cpy().tra(T3s[-1][1]).scl(T3.scale).rot(-alpha).push())
T3s.append(T6.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().flipY().rot(-alpha).push())
T3s.append(T4.cpy().tra(T3s[-2][1]).scl(T3.scale).flipX().rot(-2*alpha-pi).push())
T3s.append(T4.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().rot(-alpha).push())
T3s.append(T3.cpy().tra(T3s[-1][0]).scl(T3.scale).rot(alpha).push())
T3s.extend([t.cpy().tra(-2*cos(2*alpha)).flipY().push() for t in T3s])
T3s.append(T4.cpy().tra(T3s[7][1]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[14][1]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[-1][2]).scl(T3.scale).flipX().flipY().push())
T3s.append(T6.cpy().tra(T3s[20][0]).scl(T3.scale).flipX().rot(0).push())
T3s.append(T6.cpy().tra(T3s[-1][0]).scl(T3.scale).push())
T3s.append(T4.cpy().tra(T3s[-6][0]).scl(T3.scale).rot(pi).push())
T3s.append(T4.cpy().tra(T3s[-1][2]).scl(T3.scale).push())

T4s = []
T4s.append(T4.cpy().tra(T4[0]).scl(T4.scale).push())
T4s.append(T7.cpy().tra(T4s[-1][2]).scl(T4.scale).rot(-alpha).push())
T4s.append(T7.cpy().tra(T4s[-1][2]).scl(T4.scale).rot(-alpha+pi).push())
T4s.append(T5.cpy().tra(T4s[-2][1]).scl(T4.scale).flipX().rot(alpha/2).push())
T4s.append(T1.cpy().tra(T4s[-2][1]).tra(0, T1y1*T4.scale).scl(T4.scale).rot(pi).push())
T4s.append(T5.cpy().tra(T4s[-1][1]).scl(T4.scale).flipX().rot(alpha/2).push())
T4s.append(T5.cpy().tra(T4s[-2][3]).scl(T4.scale).push())
T4s.append(T7.cpy().tra(T4s[-3][0]).scl(T4.scale).push())
T4s.append(T7.cpy().tra(T4s[-1][0]).scl(T4.scale).flipX().push())
T4s.append(T5.cpy().tra(T4s[-1][2]).scl(T4.scale).rot(-alpha).push())
T4s.append(T3.cpy().tra(T4s[-1][0]).scl(T4.scale).flipX().rot(-4*alpha).push())
T4s.append(T7.cpy().tra(T4s[-1][1]).scl(T4.scale).flipX().rot(-alpha).push())
T4s.append(T1.cpy().tra(T4s[6][2]).tra(0, T1y1*T4.scale).scl(T4.scale).rot(pi).push())
T4s.append(T5.cpy().tra(T4s[-1][3]).scl(T4.scale).push())#
T4s.append(T3.cpy().tra(T4s[-1][1]).scl(T4.scale).flipX().push())
T4s.append(T3.cpy().tra(T4s[-1][0]).scl(T4.scale).push())
T4s.append(T5.cpy().tra(T4s[-1][0]).scl(T4.scale).rot(-alpha).push())
T4s.append(T5.cpy().tra(T4s[-1][2]).scl(T4.scale).flipX().flipY().rot(-alpha).push())
T4s.append(T7.cpy().tra(T4s[-7][0]).scl(T4.scale).rot(alpha).push())
T4s.append(T6.cpy().tra(T4s[-1][1]).scl(T4.scale).rot(alpha+pi).push())
T4s.append(T4.cpy().tra(T4s[-1][1]).scl(T4.scale).flipX().flipY().rot(-alpha-pi).push())
T4s.append(T5.cpy().tra(T4s[-1][2]).scl(T4.scale).rot(-alpha-pi).push())
T4s.append(T5.cpy().tra(T4s[-5][1]).scl(T4.scale).rot(-alpha).push())
T4s.append(T3.cpy().tra(T4s[-1][2]).scl(T4.scale).flipX().flipY().rot(-alpha).push())
T4s.append(T6.cpy().tra(T4s[-2][1]).scl(T4.scale).flipX().rot(-alpha+pi).push())
T4s.append(T1.cpy().tra(T4s[-1][2]).tra(0.5*T4.scale, T1y2*T4.scale).scl(T4.scale).rot(0).push())
T4s.extend([t.cpy().tra(-2*cos(2*alpha)).flipY().push() for t in T4s])
T4s.append(T4.cpy().tra(T4s[13][2]).scl(T4.scale).push())
T4s.append(T3.cpy().tra(T4s[15][1]).scl(T4.scale).push())
T4s.append(T4.cpy().tra(T4s[-1][0]).scl(T4.scale).flipX().push())
T4s.append(T6.cpy().tra(T4s[25][1]).scl(T4.scale).push())
T4s.append(T6.cpy().tra(T4s[-1][0]).scl(T4.scale).flipX().push())
T4s.append(T4.cpy().tra(T4s[25][3]).scl(T4.scale).push())
T4s.append(T4.cpy().tra(T4s[25][3]).scl(T4.scale).flipX().push())

T5s = []
T5s.append(T5.cpy().tra(T5[0]).scl(T5.scale).push())
T5s.append(T3.cpy().tra(T5s[-1][1]).scl(T5.scale).flipX().push())
T5s.append(T3.cpy().tra(T5s[-1][0]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).flipX().push())
T5s.append(T6.cpy().tra(T5s[-1][1]).scl(T5.scale).flipY().rot(4*alpha+pi).push())
T5s.append(T6.cpy().tra(T5s[-1][0]).scl(T5.scale).rot(alpha).push())
T5s.append(T7.cpy().tra(T5s[-1][1]).scl(T5.scale).rot(alpha+pi).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(alpha).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).push())
T5s.append(T4.cpy().tra(T5s[-1][0]).scl(T5.scale).flipX().push())
T5s.append(T3.cpy().tra(T5s[5][2]).scl(T5.scale).push())
T5s.append(T3.cpy().tra(T5s[-1][2]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).flipX().push())
T5s.append(T5.cpy().tra(T5s[-1][0]).scl(T5.scale).push())#
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).rot(pi).push())
T5s.append(T5.cpy().tra(T5s[2][1]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).flipX().push())
T5s.append(T5.cpy().tra(T5s[-1][0]).scl(T5.scale).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-alpha).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-alpha+pi).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(-alpha).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(-alpha-pi).push())
T5s.append(T5.cpy().tra(T5s[-1][0]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).flipX().push())
T5s.append(T5.cpy().tra(T5s[-1][0]).scl(T5.scale).push())
T5s.append(T1.cpy().tra(T5s[-3][1]).tra(0, T1y1*T5.scale).scl(T5.scale).rot(pi).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).rot(2*alpha).push())
T5s.append(T5.cpy().tra(T5s[-2][1]).scl(T5.scale).flipX().rot(3*alpha+pi).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(-3*alpha-alpha/2+pi).push())
T5s.append(T3.cpy().tra(T5s[-1][0]).scl(T5.scale).rot(alpha).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).flipY().rot(-2*alpha-pi).push())
T5s.append(T7.cpy().tra(T5s[-1][0]).scl(T5.scale).rot(-3*alpha).push())
T5s.append(T6.cpy().tra(T5s[-1][0]).scl(T5.scale).flipY().rot(pi).push())
T5s.append(T6.cpy().tra(T5s[-1][2]).scl(T5.scale).flipY().push())
T5s.append(T5.cpy().tra(T5s[-5][0]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(pi).push())
T5s.append(T4.cpy().tra(T5s[11][2]).scl(T5.scale).push())
T5s.append(T4.cpy().tra(T5s[13][1]).scl(T5.scale).push())
T5s.append(T4.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(pi).push())
T5s.append(T1.cpy().tra(T5s[-2][2]).tra(0, T1y1*T5.scale).scl(T5.scale).rot(pi).push())
T5s.append(T1.cpy().tra(T5s[-3][2]).tra(0, (T1y1+2*T1y2)*T5.scale).scl(T5.scale).push())
T5s.append(T7.cpy().tra(T5s[-1][1]).scl(T5.scale).push())
T5s.append(T7.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(pi).push())
T5s.append(T5.cpy().tra(T5s[-7][1]).scl(T5.scale).push())
T5s.append(T3.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(pi).push())
T5s.append(T4.cpy().tra(T5s[-1][1]).scl(T5.scale).push())#
T5s.append(T3.cpy().tra(T5s[-1][1]).scl(T5.scale).push())
T5s.append(T3.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(pi).push())
T5s.append(T5.cpy().tra(T5s[-2][1]).scl(T5.scale).rot(pi).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-1.5*alpha).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-1.5*alpha+pi).push())
T5s.append(T6.cpy().tra(T5s[-1][0]).scl(T5.scale).rot(-alpha/2).push())
T5s.append(T6.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-alpha/2+pi).push())
T5s.append(T7.cpy().tra(T5s[-1][1]).scl(T5.scale).rot(-alpha/2).push())
T5s.append(T6.cpy().tra(T5s[-1][2]).scl(T5.scale).rot(-alpha/2+pi).push())
T5s.append(T3.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(-alpha).push())
T5s.append(T3.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(-alpha-pi).push())
T5s.append(T5.cpy().tra(T5s[-3][0]).scl(T5.scale).flipX().rot(2*alpha+pi).push())
T5s.append(T5.cpy().tra(T5s[-1][2]).scl(T5.scale).flipX().rot(2*alpha+pi).push())
T5s.append(T7.cpy().tra(T5s[-1][1]).scl(T5.scale).rot(alpha).push())
T5s.append(T4.cpy().tra(T5s[-1][2]).scl(T5.scale).push())
T5s.append(T7.cpy().tra(T5s[-1][0]).scl(T5.scale).rot(alpha+pi).push())
T5s.append(T5.cpy().tra(T5s[-1][1]).scl(T5.scale).flipY().push())
T5s.append(T1.cpy().tra(T5s[-1][0]).tra(0, T1y1*T5.scale).scl(T5.scale).rot(pi).push())

T6s = []
T6s.append(T7.cpy().tra(T6[0]).scl(T6.scale).push())
T6s.append(T6.cpy().tra(T6s[-1][1]).scl(T6.scale).flipX().push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).flipX().push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).push())
T6s.append(T5.cpy().tra(T6s[-1][2]).scl(T6.scale).rot(-alpha).push())
T6s.append(T5.cpy().tra(T6s[-1][0]).scl(T6.scale).flipX().rot(-4*alpha).push())
T6s.append(T5.cpy().tra(T6s[-1][0]).scl(T6.scale).push())
T6s.append(T6.cpy().tra(T6s[-1][1]).scl(T6.scale).rot(-alpha/2).push())
T6s.append(T6.cpy().tra(T6s[-1][0]).scl(T6.scale).flipX().rot(alpha/2).push())
T6s.append(T5.cpy().tra(T6s[-1][2]).scl(T6.scale).flipX().rot(9*alpha/2).push())
T6s.append(T5.cpy().tra(T6s[-1][0]).scl(T6.scale).rot(alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-4][1]).scl(T6.scale).flipX().rot(alpha/2).push())
T6s.append(T5.cpy().tra(T6s[-1][2]).scl(T6.scale).flipX().rot(9*alpha/2).push())
T6s.append(T5.cpy().tra(T6s[-1][0]).scl(T6.scale).rot(alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).flipX().push())
T6s.append(T7.cpy().tra(T6s[-1][0]).scl(T6.scale).push())
T6s.append(T7.cpy().tra(T6s[-3][2]).scl(T6.scale).flipX().push())
T6s.append(T6.cpy().tra(T6s[-1][1]).scl(T6.scale).push())
T6s.append(T6.cpy().tra(T6s[-2][0]).scl(T6.scale).push())
T6s.append(T6.cpy().tra(T6s[0][1]).scl(T6.scale).push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).flipX().push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).push())
T6s.append(T5.cpy().tra(T6s[-1][2]).scl(T6.scale).rot(-alpha).push())
T6s.append(T3.cpy().tra(T6s[-1][0]).scl(T6.scale).flipX().rot(-4*alpha).push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).rot(-alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-1][1]).scl(T6.scale).rot(-alpha/2).push()) #
T6s.append(T1.cpy().tra(T6s[-2][2]).tra(0.5*T6.scale, (T1y2)*T6.scale).scl(T6.scale).push())
T6s.append(T7.cpy().tra(T6s[-3][1]).scl(T6.scale).flipX().rot(alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-2][3]).scl(T6.scale).flipX().rot(alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-1][0]).scl(T6.scale).rot(-alpha/2).push())
T6s.append(T5.cpy().tra(T6s[-1][2]).scl(T6.scale).rot(-3*alpha/2).push())
T6s.append(T7.cpy().tra(T6s[-11][0]).scl(T6.scale).push())
T6s.append(T3.cpy().tra(T6s[-1][2]).scl(T6.scale).rot(-alpha).push())
T6s.append(T3.cpy().tra(T6s[-1][0]).scl(T6.scale).flipX().rot(-4*alpha).push())
T6s.append(T6.cpy().tra(T6s[-1][2]).scl(T6.scale).rot(-2*alpha).push())
T6s.append(T1.cpy().tra(T6s[-10][2]).tra(0, T1y1*T6.scale).scl(T6.scale).rot(pi).push())
T6s.append(T6.cpy().tra(T6s[-2][2]).scl(T6.scale).rot(-2*alpha+pi).push())
T6s.append(T3.cpy().tra(T6s[-1][0]).scl(T6.scale).flipX().rot(-4*alpha).push())
T6s.append(T1.cpy().tra(T6s[-1][1]).tra(0.5*T6.scale, (T1y2)*T6.scale).scl(T6.scale).push())
T6s.append(T4.cpy().tra(T6s[-1][4]).scl(T6.scale).flipX().rot(-4*alpha).push())
T6s.append(T7.cpy().tra(T6s[-1][2]).scl(T6.scale).flipX().push())
T6s.append(T6.cpy().tra(T6s[-1][0]).scl(T6.scale).push())
T6s.append(T3.cpy().tra(T6s[-1][2]).scl(T6.scale).flipX().rot(-6*alpha).push())

T7s = []
T7s.append(T7.cpy().tra(T7[0]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T6.cpy().tra(T7s[-1][1]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).push())
T7s.append(T5.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-alpha).push())
T7s.append(T5.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha).push())
T7s.append(T5.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T6.cpy().tra(T7s[-1][1]).scl(T7.scale).rot(-alpha/2).push())
T7s.append(T6.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(alpha/2).push())
T7s.append(T1.cpy().tra(T7s[-1][1]).tra(0.5*T7.scale, (T1y2)*T7.scale).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).push())
T7s.append(T6.cpy().tra(T7s[0][1]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).push())
T7s.append(T5.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-alpha).push())
T7s.append(T5.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha).push())
T7s.append(T3.cpy().tra(T7s[-1][1]).scl(T7.scale).rot(-alpha).push())
T7s.append(T3.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha).push())
T7s.append(T3.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T5.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().push())
T7s.append(T3.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-1.5*alpha).push())
T7s.append(T4.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha+0.5*alpha).push())
T7s.append(T3.cpy().tra(T7s[10][2]).scl(T7.scale).rot(-1.5*alpha).push())
T7s.append(T3.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-1.5*alpha).push())
T7s.append(T7.cpy().tra(T7s[12][1]).scl(T7.scale).push())
T7s.append(T3.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-alpha).push())#
T7s.append(T3.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha).push())
T7s.append(T5.cpy().tra(T7s[-1][1]).scl(T7.scale).rot(-alpha).push())
T7s.append(T5.cpy().tra(T7s[-1][0]).scl(T7.scale).flipX().rot(-4*alpha).push())
T7s.append(T6.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T7.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T6.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T6.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-6][2]).scl(T7.scale).flipX().push())
T7s.append(T7.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-1][1]).scl(T7.scale).flipX().push())
T7s.append(T6.cpy().tra(T7s[-11][2]).scl(T7.scale).rot(-2*alpha).push())
T7s.append(T7.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-2*alpha+pi).push())
T7s.append(T6.cpy().tra(T7s[-11][2]).scl(T7.scale).rot(-2*alpha).push())
T7s.append(T6.cpy().tra(T7s[-1][2]).scl(T7.scale).rot(-2*alpha+pi).push())
T7s.append(T3.cpy().tra(T7s[-3][0]).scl(T7.scale).flipY().rot(-1.5*alpha).push())
T7s.append(T4.cpy().tra(T7s[-1][1]).scl(T7.scale).rot(-alpha).push())
T7s.append(T3.cpy().tra(T7s[-3][0]).scl(T7.scale).flipY().rot(-1.5*alpha).push())
T7s.append(T7.cpy().tra(T7s[-1][2]).scl(T7.scale).flipX().push())
T7s.append(T6.cpy().tra(T7s[-1][1]).scl(T7.scale).push())
T7s.append(T3.cpy().tra(T7s[-5][2]).scl(T7.scale).flipY().rot(-1.5*alpha).push())
T7s.append(T7.cpy().tra(T7s[-1][2]).scl(T7.scale).flipX().push())
T7s.append(T7.cpy().tra(T7s[-1][0]).scl(T7.scale).push())
T7s.append(T7.cpy().tra(T7s[-2][1]).scl(T7.scale).push())

def substitutions(tile):
    match tile.name:
        case 'T1': return T1s
        case 'T2': return T2s
        case 'T3': return T3s
        case 'T4': return T4s
        case 'T5': return T5s
        case 'T6': return T6s
        case 'T7': return T7s

tiles = [T1,T2,T3,T4,T5,T6,T7]
